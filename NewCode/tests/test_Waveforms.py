from __future__ import division

from numpy.testing import NumpyTestCase, assert_array_equal, assert_almost_equal, assert_equal
import numpy as N
from NewCode import Waveforms

class test_GaussianWavforms(NumpyTestCase):
    def setUp(self):
        self.t = N.linspace(-5,5,21)

    def test_gaussian(self):
        assert_almost_equal(N.fromiter(
            (Waveforms.gaussian(1, 1/2, t) for t in self.t), N.float64),
                            gaussian, decimal=15)

    def test_d_gaussian(self):
        assert_almost_equal(N.fromiter(
            (Waveforms.d_gaussian(1, 1/2, t) for t in self.t), N.float64),
                            d_gaussian, decimal=15)

    def test_d_d_gaussian(self):
        assert_almost_equal(N.fromiter(
            (Waveforms.d_d_gaussian(1, 1/2, t) for t in self.t), N.float64),
                            d_d_gaussian, decimal=15)
        

class test_getGaussanWavforms(NumpyTestCase):
    def test_get_d_gaussian(self):
        dg = Waveforms.get_d_gaussian(fc=1.5, tpr=-60)
        desired =  [5.7164167941905139095e-3,2.208521453676490951e-1,2.3573720257103849219e0,5.7126415029641444359e0,-9.6292172325892394116e-1,-5.543988152495771877e0,-1.6660489421407833404e0]
        assert_almost_equal(N.fromiter((dg(4/35., n) for n in range(7)), N.float64),
                            desired, decimal=15)
        dg_peak = abs(dg(1., dg.cutoff_time/2+dg.sigma))
        # The amplitude at t=0 and t -> cutoff_time from below should be tpr dB relative to peak
        assert_almost_equal(20*N.log10(dg(1.,0.)/dg_peak), -60)
        assert_almost_equal(20*N.log10(abs(dg(1., dg.cutoff_time*0.99999999999)/dg_peak)), -60)
        # And exactly zero after cutoff_time
        assert_equal(dg(1., dg.cutoff_time*1.00000000001), 0.)

        
#gaussian with sigma=1, m=1/2 from -5 to 5 in 21 steps
gaussian = [2.6995785033630143387260848396334e-7,3.7266531720786709929248514759504e-6,4.0065297392951067531627094076754e-5,3.3546262790251183882138912578086e-4,2.1874911181828851232794637685738e-3,1.1108996538242306496143134286931e-2,4.3936933623407417326747681701463e-2,1.3533528323661269189399949497248e-1,3.2465246735834972979706813747247e-1,6.0653065971263342360379953499118e-1,8.8249690258459540286489214322905e-1,1.0e0,8.8249690258459540286489214322905e-1,6.0653065971263342360379953499118e-1,3.2465246735834972979706813747247e-1,1.3533528323661269189399949497248e-1,4.3936933623407417326747681701463e-2,1.1108996538242306496143134286931e-2,2.1874911181828851232794637685738e-3,3.3546262790251183882138912578086e-4,4.0065297392951067531627094076754e-5]

d_gaussian = [1.4847681768496578862993466617984e-6,1.8633265860393354964624257379752e-5,1.8029383826827980389232192334539e-4,1.3418505116100473552855565031234e-3,7.6562189136400979314781231900084e-3,3.3326989614726919488429402860792e-2,1.0984233405851854331686920425366e-1,2.7067056647322538378799898994497e-1,4.8697870103752459469560220620871e-1,6.0653065971263342360379953499118e-1,4.4124845129229770143244607161453e-1,0.0e0,-4.4124845129229770143244607161453e-1,-6.0653065971263342360379953499118e-1,-4.8697870103752459469560220620871e-1,-2.7067056647322538378799898994497e-1,-1.0984233405851854331686920425366e-1,-3.3326989614726919488429402860792e-2,-7.6562189136400979314781231900084e-3,-1.3418505116100473552855565031234e-3,-1.8029383826827980389232192334539e-4]

d_d_gaussian =  [7.8962671223368169407737981559278e-6,8.943967612988810383019643542281e-5,7.7125697481430804998382156097752e-4,5.0319394185376775823208368867129e-3,2.4609275079557457636893967396456e-2,8.8871972305938451969145074295444e-2,2.3066890152288894096542532893268e-1,4.0600584970983807568199848491746e-1,4.0581558419793716224633517184059e-1,0.0e0,-6.6187267693844655214866910742179e-1,-1.0e0,-6.6187267693844655214866910742179e-1,0.0e0,4.0581558419793716224633517184059e-1,4.0600584970983807568199848491746e-1,2.3066890152288894096542532893268e-1,8.8871972305938451969145074295444e-2,2.4609275079557457636893967396456e-2,5.0319394185376775823208368867129e-3,7.7125697481430804998382156097752e-4]
