load("PyramidCoords")$
expandall:true$

simp:false$
simp:true$

crl_BFs(BFs):=makelist(post_crl_simplify(curl(bf)), bf, BFs)$
/* Because of the local element edge/face numbering chosen in
PyramMesh.Element, we have the following relation between graglia99's edge
functions and element edge numbers:

ef_1: -Omega_15,
ef_2: +Omega_25,
ef_3: -Omega_45,
ef_4: +Omega_35,
ef_5: +Omega_12,
ef_6: +Omega_41,
ef_7: +Omega_23,
ef_8: +Omega_34

*/

onef_efs:[
/* - Omega_15 */
- ((lam2*lam3*grad(lam4) - lam3*lam4*grad(lam2))/(1-lam5)),
/* + Omega_25 */
+ ((lam3*lam4*grad(lam1) - lam4*lam1*grad(lam3))/(1-lam5)),
/* - Omega_45 */
- ((lam1*lam2*grad(lam3) - lam2*lam3*grad(lam1))/(1-lam5)),
/* + Omega_35 */
+ ((lam4*lam1*grad(lam2) - lam1*lam2*grad(lam4))/(1-lam5)),
/* Omega_12 */
((lam3*lam4*grad(lam5) - lam4*lam5*grad(lam3) - lam3*lam5*grad(lam4))/(1-lam5)
  - lam3*lam4*lam5*grad(lam5)/(1-lam5)^2),
/* Omega_41 */
((lam2*lam3*grad(lam5) - lam3*lam5*grad(lam2) - lam2*lam5*grad(lam3))/(1-lam5)
  - lam2*lam3*lam5*grad(lam5)/(1-lam5)^2),
/* Omega_23 */
((lam4*lam1*grad(lam5) - lam1*lam5*grad(lam4) - lam4*lam5*grad(lam1))/(1-lam5)
  - lam4*lam1*lam5*grad(lam5)/(1-lam5)^2),
/* Omega_34 */
((lam1*lam2*grad(lam5) - lam2*lam5*grad(lam1) - lam1*lam5*grad(lam2))/(1-lam5)
  - lam1*lam2*lam5*grad(lam5)/(1-lam5)^2)
]$

D_onef_efs:crl_BFs(onef_efs)$
expandall:false$

emod(n):=mod(n-1,4)+1$

edge_shift_subs_list:makelist(
  [lam1=concat(lam,emod(i)),   lam2=concat(lam, emod(i+1)),
   lam3=concat(lam,emod(i+2)), lam4=concat(lam, emod(i+3))],
  i, 1, 4)$

onef_baseedge_fn:((lam2*lam3*grad(lam4) - lam3*lam4*grad(lam2))/(1-lam5))$
onef_apexedge_fn:((lam3*lam4*grad(lam5) - lam4*lam5*grad(lam3) - lam3*lam5*grad(lam4))/(1-lam5)
  - lam3*lam4*lam5*grad(lam5)/(1-lam5)^2)$

onef_baseedge_fn_i:[1,2,4,3]$
onef_baseedge_fn_sense:[-1,1,-1,1]$
onef_apexedge_fn_i:[1,4,2,3]$
onef_apexedge_fn_sense:[1,1,1,1]$
onef_baseface_fn_i:[2,3]$
onef_apexface_fn_i0_i:[1, 2, 3, 4]$
onef_apexface_fn_i1_i:[4, 1, 2, 3]$
onef_volbase_fn_i:[2,3]$
onef_volapex_fn_i:1$

p0_onef_apex_edge_interp_fns:[1]$
p0_onef_base_edge_interp_fns:[1]$

p1_onef_apex_edge_interp_fns:[3*lam5-1, 3*lam3-3*lam2-1]$
p1_onef_apex_facei0_interp_fns:[3*lam2]$
p1_onef_apex_facei1_interp_fns:[3*lam1]$
p1_onef_base_edge_interp_fns:[(3*lam4-1)*(2*lam3+2*lam5-1),
                              (3*lam2-1)*(2*lam3+2*lam5-1)]$
p1_onef_base_face_interp_fns:[2*lam1*(3*lam4-1),
                              2*lam1*(3*lam2-1)]$

/*p1_3*lam5*(1-3*lam1)
This base-edge interp function's interpollation point is
actually on an apex edge; since the apex-edges are already used to fully
interpolate each face it is unneeded
*/
p1_onef_base_vol_interp_fns:[9*lam1*lam5]$
/* speculative */
p1_onef_apex_vol_interp_fns:[lam1*lam2*lam3*lam4]$

shift_fn_edge(fn, i):=sublis(edge_shift_subs_list[i], fn)$

gen_base_edges(intrp_fn):=makelist(
  shift_fn_edge(onef_baseedge_fn*onef_baseedge_fn_sense[i]*intrp_fn,
    onef_baseedge_fn_i[i]),
  i,1,4)$

gen_apex_edges(intrp_fn):=makelist(
  shift_fn_edge(onef_apexedge_fn*onef_apexedge_fn_sense[i]*intrp_fn,
    onef_apexedge_fn_i[i]),
  i,1,4)$

make_edge_basis(base_interp, apex_interp):=block(
  [revlist:[1,3], no_interp:max(length(base_interp), length(apex_interp))],
  apply(append, makelist(append(block(
          [ep:gen_base_edges(base_interp[i]),
           er:gen_base_edges(base_interp[no_interp-i+1])],
          makelist(if not member(e_no, revlist) then ep[e_no] else er[e_no],
              e_no, 1, 4)),
        gen_apex_edges(apex_interp[i])),
      i, 1, no_interp)))$

make_baseface_basis(base_interp):=apply(append,
  makelist(
    makelist(shift_fn_edge(int_fn*onef_baseedge_fn, i), int_fn,
      base_interp), i, onef_baseface_fn_i))$

make_apexface_basis(apex_interpi0, apex_interpi1):=block([revlist:[2,3],
  /* revlist contains face numbers that have their edge senses reversed as
  compared to the senses required for inter-element continuity */ 
  i0_bfs:apply(append, makelist(
      makelist(shift_fn_edge(int_fn*onef_apexedge_fn, i),
        i, onef_apexface_fn_i0_i),
      int_fn, apex_interpi0)),
  i1_bfs:apply(append, makelist(
      makelist(shift_fn_edge(int_fn*onef_apexedge_fn, i),
        i, onef_apexface_fn_i1_i),
      int_fn, apex_interpi1))],
  append(makelist(
      if not member(mod(i,4), revlist) then i0_bfs[i] else i1_bfs[i],
      i, 1, length(i0_bfs)),
    makelist(
      if not member(mod(i,4), revlist) then i1_bfs[i] else i0_bfs[i],
      i, 1, length(i0_bfs)))
    )$

make_basevol_basis(base_interp):=apply(append,
  makelist(makelist(
      shift_fn_edge(int_fn*onef_baseedge_fn, i), i, onef_volbase_fn_i),
    int_fn, base_interp))$

make_apexvol_basis(apex_interp):=apply(append, 
  makelist(shift_fn_edge(int_fn*onef_apexedge_fn, onef_volapex_fn_i),
    int_fn, apex_interp))$


onef_efs_p0:make_edge_basis(p0_onef_base_edge_interp_fns,
  p0_onef_apex_edge_interp_fns)$

onef_efs_p1:make_edge_basis(p1_onef_base_edge_interp_fns,
  p1_onef_apex_edge_interp_fns)$

onef_baseffs_p1:make_baseface_basis(p1_onef_base_face_interp_fns)$
onef_apexffs_p1:make_apexface_basis(p1_onef_apex_facei0_interp_fns,
  p1_onef_apex_facei1_interp_fns)$
onef_basevolfuns_p1:make_basevol_basis(p1_onef_base_vol_interp_fns)$


expandcurl:true $ expandplus:true $
D_onef_efs_p1:crl_BFs(onef_efs_p1)$
D_onef_apexffs_p1:crl_BFs(onef_apexffs_p1)$
D_onef_baseffs_p1:crl_BFs(onef_baseffs_p1)$
D_onef_basevolfuns_p1:crl_BFs(onef_basevolfuns_p1)$
expandcurl:false $ expandplus:false $

p1_bfs:append(onef_efs_p1, onef_baseffs_p1, onef_apexffs_p1, onef_basevolfuns_p1)$
D_p1_bfs:append(D_onef_efs_p1, D_onef_baseffs_p1, D_onef_apexffs_p1, D_onef_basevolfuns_p1)$
