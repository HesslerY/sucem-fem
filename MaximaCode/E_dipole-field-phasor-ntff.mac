load("E_dipole-field-phasor")$

r_hatx:[1,0,0]$
r_haty:[0,1,0]$
r_hatz:[0,0,1]$
x_hat:r_hatx$ y_hat: r_haty$ z_hat:r_hatz$


calc_theta(u):=acos(u[3]/calc_r(u))$
calc_r(u):=sqrt(u[1]^2+u[2]^2+u[3]^2)$
calc_phi(u):=atan2(u[2],u[1])$
calc_theta_hat(u):=block([theta:calc_theta(u), phi],
  if ((abs(u[1]) > 0) or (abs(u[2]) > 0)) then (
    phi:calc_phi(u),
    cos(theta)*cos(phi)*x_hat + cos(theta)*sin(phi)*y_hat - sin(theta)*z_hat)
  else (['xxx,'yyy,0]))$

/*
r_hats:[r_hatx, 1/sqrt(2)*(r_hatx+r_haty), r_haty, 1/sqrt(2)*(r_hatx+r_hatz),
        1/sqrt(2)*(r_haty+r_hatz), r_hatz]$
*/
r_hats:[r_hatx]$
theta_hats:map(calc_theta_hat, r_hats)$
thetas:map(calc_theta, r_hats)$
ks: [1/4, 1/2, 1]*2*%pi$
surf_pos:1$

surf1[const]:'z$
surf1[constval]:surf_pos$
surf1[n_hat]:[0,0,1]$
surf1[inta]:'x$
surf1[intb]:'y$
surf1[inta_range]:[-surf_pos, surf_pos]$
surf1[intb_range]:[-surf_pos, surf_pos]$
surf2[const]:'z$
surf2[constval]:-surf_pos$
surf2[n_hat]:[0,0,-1]$
surf2[inta]:'x$
surf2[intb]:'y$
surf2[inta_range]:[-surf_pos, surf_pos]$
surf2[intb_range]:[-surf_pos, surf_pos]$
surf3[const]:'y$
surf3[constval]:surf_pos$
surf3[n_hat]:[0,1,0]$
surf3[inta]:'x$
surf3[intb]:'z$
surf3[inta_range]:[-surf_pos, surf_pos]$
surf3[intb_range]:[-surf_pos, surf_pos]$
surf4[const]:'y$
surf4[constval]:-surf_pos$
surf4[n_hat]:[0,-1,0]$
surf4[inta]:'x$
surf4[intb]:'z$
surf4[inta_range]:[-surf_pos, surf_pos]$
surf4[intb_range]:[-surf_pos, surf_pos]$
surf5[const]:'x$
surf5[constval]:surf_pos$
surf5[n_hat]:[1,0,0]$
surf5[inta]:'y$
surf5[intb]:'z$
surf5[inta_range]:[-surf_pos, surf_pos]$
surf5[intb_range]:[-surf_pos, surf_pos]$
surf6[const]:'x$
surf6[constval]:-surf_pos$
surf6[n_hat]:[-1,0,0]$
surf6[inta]:'y$
surf6[intb]:'z$
surf6[inta_range]:[-surf_pos, surf_pos]$
surf6[intb_range]:[-surf_pos, surf_pos]$
/*surfs:[surf1, surf2, surf3, surf4, surf5, surf6]$*/
surfs:[surf1, surf2, surf3, surf4, surf5, surf6]$

do_intg(surf, k, r_hat, int_expr):=block([rfn, sfn, intgnd_fn_i, intgnd_fn_r,
  dblint_y:25, dblint_x:25, n_hat:surf['n_hat], inta_range:surf[inta_range],
  intb_range:surf[intb_range], intgnd, intgnd_i, intgnd_r, intb_r, intb_s],
  local(rfn, sfn, intgnd_fn_i, intgnd_fn_r, intgnd),
  intgnd:ev(express(n_hat~int_expr)*exp(%i*k*r_hat.[x,y,z]),
    surf[const]::surf[constval]),
  intb_r:intb_range[1], intb_s:intb_range[2],
  rfn(xx):=(mode_declare(xx, float), intb_r),
  sfn(xx):=(mode_declare(xx, float), intb_s),
  intgnd_i:ev(imagpart(intgnd)), intgnd_r:ev(realpart(intgnd)),
  intgnd_fn_i(xx,yy):=(mode_declare(xx,float, yy, float),
    ev(float(intgnd_i), surf[inta]::xx, surf[intb]::yy)),
  intgnd_fn_r(xx,yy):=(mode_declare(xx,float, yy, float),
    ev(float(intgnd_r), surf[inta]::xx, surf[intb]::yy)),
  (dblint(intgnd_fn_r, rfn, sfn, inta_range[1], inta_range[2]) +
    %i*dblint(intgnd_fn_i, rfn, sfn, inta_range[1], inta_range[2]))
)$

intgnd_expr(n_hat, r_hat, field_expr):=ev(
  express(n_hat~field_expr)*exp(%i*k*r_hat.[x,y,z]))$

do_box_intg(surfs, k, r_hat, int_expr):=lreduce("+", makelist(
    do_intg(surf, k, r_hat, int_expr), surf, surfs))$

calc_ks_r_hats(surfs, ks, r_hats, int_expr):=makelist(
  makelist(do_box_intg(surfs, k_vl, r_hat_vl, int_expr),
    r_hat_vl, r_hats),
  k_vl, ks)$

calc_E_inf(k, r_hat, L, N):=block(
  [E_inf:-(%i*k/4/%pi)*express(L~r_hat + nabla*r_hat~(N~r_hat))],
  realpart(E_inf)+%i*imagpart(E_inf))$

calc_E_infs(ks, r_hats, Ls, Ns):=block([l_ks:length(ks), l_r_hats:length(r_hats)],
  makelist(makelist(float(calc_E_inf(
        float(ks[k_i]), float(r_hats[r_hat_j]), Ls[k_i][r_hat_j], Ns[k_i][r_hat_j])),
      r_hat_j, 1, l_r_hats),
    k_i, 1, l_ks))$

fix_realim(expr):=realpart(expr)+%i*imagpart(expr)$

epsilon_vl:1$ mu_vl:1$ I_vl:1$ l_vl:1$
nabla:1$

mesh_h:2/17$
pts_1d:linspace(-surf_pos+mesh_h/2, surf_pos-mesh_h/2, 2*surf_pos/mesh_h)$
pts:apply(append, makelist(makelist([pt_i, pt_j], pt_j, pts_1d), pt_i, pts_1d))$

E_pt_expr:ev(E, epsilon:epsilon_vl, mu:mu_vl, I:I_vl, l:l_vl)$
E_pt_expr_surfs:makelist(intgnd_expr(surf[n_hat], r_hats[1], E_pt_expr), surf, surfs)$



E_pt_intgnds:makelist(makelist(makelist(ev(float(expand(fix_realim(ev(
                E_pt_expr_surfs[i], k:k_, surfs[i][const]::surfs[i][constval],
        surfs[i][inta]::pt[1], surfs[i][intb]::pt[2]))))),
      pt, pts),
    k_, ks),
  i, 1, length(surfs))$

E_pt_vals:makelist(makelist(makelist(ev(float(expand(fix_realim(ev(
                E_pt_expr, k:k_, surfs[i][const]::surfs[i][constval],
        surfs[i][inta]::pt[1], surfs[i][intb]::pt[2]))))),
      pt, pts),
    k_, ks),
  i, 1, length(surfs))$



/*
Ls:calc_ks_r_hats(surfs, ks, r_hats, ev(
    E, epsilon:epsilon_vl, mu:mu_vl, I:I_vl, l:l_vl))*-1$

Ns:calc_ks_r_hats(surfs, ks, r_hats, ev(
    H, epsilon:epsilon_vl, mu:mu_vl, I:I_vl, l:l_vl))$

*/



/*
E_infs:calc_E_infs(ks, r_hats, Ls, Ns)$
E_infs:ev(E_infs)$
*/
/*E_inf:-(%i*k_vl/4/%pi)*express(L~r_hat_vl + nabla*r_hat_vl~(N~r_hat_vl))$*/
/*E_inf:realpart(E_inf)+%i*imagpart(E_inf)$*/



/*E_inf:-(%i*k_vl/4/%pi)*express(L~r_hat_vl + nabla*r_hat_vl~(N~r_hat_vl))$*/
/*E_inf:realpart(E_inf)+%i*imagpart(E_inf)$*/

/*r:sqrt(x^2+y^2+z^2)$*/
/*phi:atan2(y,x)$*/
/*theta:acos(z/r)$*/
/*theta_hat:cos(theta)*cos(phi)*x_hat + cos(theta)*sin(phi)*y_hat - sin(theta)*z_hat$*/
E_inf_an:%i*nabla*k/4/%pi*sin(theta)*theta_hat$ 

E_inf_ans:makelist(makelist(ev(E_inf_an, k:k_vl, theta:thetas[t_j], theta_hat:theta_hats[t_j]),
    t_j, 1, length(thetas)), k_vl, ks)$