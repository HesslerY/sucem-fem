load("gen_quad_rules")$

test_poly_terms_weighted(n,x):=makelist(concat(c_,x,i)*x^i, i, 0, n)$

test_poly(n,x):=lreduce("+", test_poly_terms_weighted(n,x))$

test_rule(f, x, n):=[eval_quad(f, x, make_quad(n)), integrate(f,x,0,1)]$

test_poly_terms(n,x):=makelist(x^n,n,0,n)$

term_consts(terms):=makelist(concat(c_, i-1)*terms[i], i, 1, length(terms))$

test_poly_2D(n, x, y):=lreduce("+",term_consts(makelist(
  lreduce("*", l), l, listify(cartesian_product(
      setify(test_poly_terms(n,x)), setify(test_poly_terms(n,y)))))))$

test_poly_nD(n, vars):=lreduce("+",term_consts(makelist(
  lreduce("*", l), l, listify(apply(cartesian_product, makelist(
      setify(test_poly_terms(n,v)),v,vars))))))$

tp_3d_1:test_poly_nD(1,[x[1], x[2], x[3]])$
tp_3d_2:test_poly_nD(2,[x[1], x[2], x[3]])$
tp_3d_3:test_poly_nD(3,[x[1], x[2], x[3]])$
tp_3d_4:test_poly_nD(4,[x[1], x[2], x[3]])$
tp_3d_5:test_poly_nD(5,[x[1], x[2], x[3]])$

qr2_3d:make_nD_quad(3,make_quad(2))$
qr3_3d:make_nD_quad(3,make_quad(3))$

/* Should give zero */
t5:integrate(integrate(integrate(tp_3d_5, x[1], 0, 1),
    x[2], 0, 1), x[3], 0, 1) - eval_quad(tp_3d_5, x, qr3_3d)$

cube_intg(fn,x):=integrate(integrate(integrate(fn, x[1], 0, 1),
    x[2], 0, 1), x[3], 0, 1)$

square_intg(fn):=integrate(integrate(fn, x[1], 0, 1),
    x[2], 0, 1)$

tp_3d_3:subst(makelist(concat(c_,i)=mod(i,7)-3,i,0,length(tp_3d_3)), tp_3d_3)$

test_intg_3:cube_intg(tp_3d_3, x)$
