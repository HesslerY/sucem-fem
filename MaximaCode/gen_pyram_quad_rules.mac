load("gen_quad_rules")$
fpprec:32$
q0:sqrt(3)$
q1:sqrt(5)*(4*x-3)$
q2:sqrt(7)*(15*x^2-20*x+6)$
q3:sqrt(9)*(56*x^3-105*x^2+60*x-10)$
q4:sqrt(11)*(210*x^4-504*x^3+420*x^2-140*x+15)$
q5:sqrt(13)*(792*x^5-2310*x^4+2520*x^3-1260*x^2+280*x-21)$

q:[q1,q2,q3,q4,q5]$
pts:makelist(block([s:solve(q[i])], makelist(trigsimp(rectform(subst([ss], x))),ss,s)),
  i,1,3)$

gen_b(m):=1/(q0^2 + lreduce("+", makelist(q[i]^2,i,1,m-1)))$
b:cons([1/3], makelist(makelist(subst([x=xx], ev(gen_b(m))),xx,pts[m]), m,2,3))$
pts4:rationalize(block([s:solve(q[4])], makelist(bfloat(rectform(subst([ss], x))),ss,s)))$
b4:makelist(subst([x=xx], ev(gen_b(4))),xx,pts4)$
b_num:bfloat(b), fpprec:32$
pts_num:bfloat(pts), fpprec:32$


qr2_2d:make_nD_quad(2, make_quad(2))$
qr3_2d:make_nD_quad(2, make_quad(3))$
qr4_2d:make_nD_quad(2, make_quad(4))$

make_pyr_rule(base_pts, base_w, cone_pts, cone_w):=
[pyr_pts:apply(append,
  makelist(makelist(append(b_pt*c_pt, [1-c_pt]), b_pt, base_pts),
    c_pt, cone_pts)),
pyr_wts:apply(append,
  makelist(makelist(b_w*c_w, b_w, base_w), c_w, cone_w))]$

eval_pyr_quad(ff, quad_rule):=block([quad_points:quad_rule[1],
  quad_weights: quad_rule[2]],
  fullratsimp(lreduce("+", makelist(ev(ff*quad_weights[i], u:quad_points[i]),
      i, 1, length(quad_points)))))$

eval_pyr_quad_2(ff, aap, quad_rule):=block([quad_points:quad_rule[1],
  quad_weights: quad_rule[2]],
  fullratsimp(lreduce("+", makelist(subst(
          [''aap=quad_points[i]], ff*quad_weights[i]),
        i, 1, length(quad_points)))))$


rule_to_lam(rule):=block([wts:rule[2], pts:rule[1]],
  [makelist([p[1], p[2], 1-p[1]-p[3], 1-p[2]-p[3], p[3]], p, pts),
  wts])$