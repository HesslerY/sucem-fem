load("orthopoly")$

shifted_legendre_p(n, x):=legendre_p(n, 2*x - 1)$

shifted_weights(L):= 4/((1-(2*x-1)^2)*diff(L,x)^2)$

make_quad(n):=block([l_p:shifted_legendre_p(n,x), roots, weights, w,t],
  roots:sort(makelist(last(r),r,
      (t:rectform(solve(l_p=0)), realpart(t)+%i*imagpart(t)))
      , "<"),
  w:shifted_weights(l_p),
  weights:makelist(ev(w, x:r), r, roots),
  fullratsimp([roots, weights]))$

eval_quad(f, xxx, quad_rule):=block([quad_points:quad_rule[1],
  quad_weights: quad_rule[2]],
  fullratsimp(lreduce("+", makelist(ev(f*quad_weights[i], ''xxx:quad_points[i]),
      i, 1, length(quad_points)))))$

make_nD_quad(n, quad_1D):=block([ind:setify(makelist(i,i,1,length(quad_1D[1]))),
  pts_1D:quad_1D[1], weights_1D:quad_1D[2], cart_ind, weights_nD, pts_nD],
  cart_ind:listify(apply(cartesian_product, makelist(ind, i,1, n))),
  weights_nD:makelist(lreduce("*", makelist(weights_1D[i[j]],j,1,n)), i, cart_ind),
  pts_nD:makelist(makelist(pts_1D[i[j]],j,1,n), i, cart_ind),
  [pts_nD, weights_nD])$
