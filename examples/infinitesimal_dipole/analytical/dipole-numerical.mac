kill(all)$
load("dipole_analytical_haus_melcher.mac")$

mu:4*%pi*10^(-7)$ /* Exact definition of vacuum permiability */
c0:299792458$ /* Exact definition of the speed of light */
epsilon:1/mu/c0^2$ /* Exact definition of vacuum permittivity */
f:1*10^9$ /* Dipole frequency in Hz*/
lam:c0/f$
l:lam/1000$ /* Dipole length in m*/
I:1$ /* Dipole current in Amperes*/
/* Wave number i.t.o. frequency and physical constants */
k:f*2*%pi*sqrt(mu*epsilon)$ 

/* Make a list of test positions along the X axis */
test_pts_1:makelist([lam*fac/10, 0, 0], fac, 1, 100)$
/* Make a list of test positions along a diagonal */
test_pts_2:makelist([lam*fac/10, lam*fac/20,lam*fac/10], fac, 1, 100)$

E_vals_1:makelist(radcan(ev(E, x:pt[1], y:pt[2], z:pt[3])), pt, test_pts_1)$
E_vals_2:makelist(radcan(ev(E, x:pt[1], y:pt[2], z:pt[3])), pt, test_pts_2)$
E_vals_1_re: float(realpart(E_vals_1))$
E_vals_1_im: float(imagpart(E_vals_1))$
E_vals_2_re: float(realpart(E_vals_2))$
E_vals_2_im: float(imagpart(E_vals_2))$

write_data(E_vals_1_re, "E_vals_1_re.csv", comma)$
write_data(E_vals_1_im, "E_vals_1_im.csv", comma)$
write_data(E_vals_2_re, "E_vals_2_re.csv", comma)$
write_data(E_vals_2_im, "E_vals_2_im.csv", comma)$
write_data(float(test_pts_1), "test_pts_1.csv", comma)$
write_data(float(test_pts_2), "test_pts_2.csv", comma)$
problem_data['f]:float(f)$
problem_data['l]:float(l)$
problem_data['I]:float(I)$
write_data(problem_data, "problem_data.txt")$